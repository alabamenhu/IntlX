unit module Intl::X;

# The "loaded" language
my $language = 'es';

# All exceptions are stored here, where keys are language tags,
# and values are a hash of exception type names.
my %x;

# When in doubt, we can always simply
my \ENGLISH = method ($self:){ callsame }

#| Loads the exceptions for a given language.
sub load-language($code) {
    my $module = "Intl::X::$code";
    try require ::($module);
    if ::($module) ~~ Failure {
        # TODO: error handling
    } else {
        %x{$code} := ::($module ~ "::%exceptions");
    }
}


load-language('es');

#####################################################
### AUTOGENERATED ! AUTOGENERATED ! AUTOGENERATED ###
#####################################################
###  DO NOT EDIT THIS BOX OR ANYTHING BENEATH IT  ###
#####################################################

CX::Done.^find_method("message").wrap(%x{$language}<{CX::Done>//ENGLISH);
CX::Emit.^find_method("message").wrap(%x{$language}<{CX::Emit>//ENGLISH);
CX::Last.^find_method("message").wrap(%x{$language}<{CX::Last>//ENGLISH);
CX::Next.^find_method("message").wrap(%x{$language}<{CX::Next>//ENGLISH);
CX::Proceed.^find_method("message").wrap(%x{$language}<{CX::Proceed>//ENGLISH);
CX::Redo.^find_method("message").wrap(%x{$language}<{CX::Redo>//ENGLISH);
CX::Return.^find_method("message").wrap(%x{$language}<{CX::Return>//ENGLISH);
CX::Succeed.^find_method("message").wrap(%x{$language}<{CX::Succeed>//ENGLISH);
CX::Take.^find_method("message").wrap(%x{$language}<{CX::Take>//ENGLISH);
X::AdHoc.^find_method("message").wrap(%x{$language}<{X::AdHoc>//ENGLISH);
X::Adverb.^find_method("message").wrap(%x{$language}<{X::Adverb>//ENGLISH);
X::Anon::Augment.^find_method("message").wrap(%x{$language}<{X::Anon::Augment>//ENGLISH);
X::Anon::Multi.^find_method("message").wrap(%x{$language}<{X::Anon::Multi>//ENGLISH);
X::ArrayShapeMismatch.^find_method("message").wrap(%x{$language}<{X::ArrayShapeMismatch>//ENGLISH);
X::Assignment::ArrayShapeMismatch.^find_method("message").wrap(%x{$language}<{X::Assignment::ArrayShapeMismatch>//ENGLISH);
X::Assignment::RO.^find_method("message").wrap(%x{$language}<{X::Assignment::RO>//ENGLISH);
X::Assignment::RO::Comp.^find_method("message").wrap(%x{$language}<{X::Assignment::RO::Comp>//ENGLISH);
X::Attribute::NoPackage.^find_method("message").wrap(%x{$language}<{X::Attribute::NoPackage>//ENGLISH);
X::Attribute::Package.^find_method("message").wrap(%x{$language}<{X::Attribute::Package>//ENGLISH);
X::Attribute::Regex.^find_method("message").wrap(%x{$language}<{X::Attribute::Regex>//ENGLISH);
X::Attribute::Required.^find_method("message").wrap(%x{$language}<{X::Attribute::Required>//ENGLISH);
X::Attribute::Scope::Package.^find_method("message").wrap(%x{$language}<{X::Attribute::Scope::Package>//ENGLISH);
X::Attribute::Undeclared.^find_method("message").wrap(%x{$language}<{X::Attribute::Undeclared>//ENGLISH);
X::Augment::NoSuchType.^find_method("message").wrap(%x{$language}<{X::Augment::NoSuchType>//ENGLISH);
X::Backslash::NonVariableDollar.^find_method("message").wrap(%x{$language}<{X::Backslash::NonVariableDollar>//ENGLISH);
X::Backslash::UnrecognizedSequence.^find_method("message").wrap(%x{$language}<{X::Backslash::UnrecognizedSequence>//ENGLISH);
X::Bind.^find_method("message").wrap(%x{$language}<{X::Bind>//ENGLISH);
X::Bind::NativeType.^find_method("message").wrap(%x{$language}<{X::Bind::NativeType>//ENGLISH);
X::Bind::Slice.^find_method("message").wrap(%x{$language}<{X::Bind::Slice>//ENGLISH);
X::Bind::ZenSlice.^find_method("message").wrap(%x{$language}<{X::Bind::ZenSlice>//ENGLISH);
X::Buf::AsStr.^find_method("message").wrap(%x{$language}<{X::Buf::AsStr>//ENGLISH);
X::Buf::Pack.^find_method("message").wrap(%x{$language}<{X::Buf::Pack>//ENGLISH);
X::Buf::Pack::NonASCII.^find_method("message").wrap(%x{$language}<{X::Buf::Pack::NonASCII>//ENGLISH);
X::Caller::NotDynamic.^find_method("message").wrap(%x{$language}<{X::Caller::NotDynamic>//ENGLISH);
X::Cannot::Capture.^find_method("message").wrap(%x{$language}<{X::Cannot::Capture>//ENGLISH);
X::Cannot::Empty.^find_method("message").wrap(%x{$language}<{X::Cannot::Empty>//ENGLISH);
X::Cannot::Junction.^find_method("message").wrap(%x{$language}<{X::Cannot::Junction>//ENGLISH);
X::Cannot::Lazy.^find_method("message").wrap(%x{$language}<{X::Cannot::Lazy>//ENGLISH);
X::Cannot::Map.^find_method("message").wrap(%x{$language}<{X::Cannot::Map>//ENGLISH);
X::Cannot::New.^find_method("message").wrap(%x{$language}<{X::Cannot::New>//ENGLISH);
X::Comp::BeginTime.^find_method("message").wrap(%x{$language}<{X::Comp::BeginTime>//ENGLISH);
X::Comp::FailGoal.^find_method("message").wrap(%x{$language}<{X::Comp::FailGoal>//ENGLISH);
X::Comp::Group.^find_method("message").wrap(%x{$language}<{X::Comp::Group>//ENGLISH);
X::Comp::WheneverOutOfScope.^find_method("message").wrap(%x{$language}<{X::Comp::WheneverOutOfScope>//ENGLISH);
X::CompUnit::UnsatisfiedDependency.^find_method("message").wrap(%x{$language}<{X::CompUnit::UnsatisfiedDependency>//ENGLISH);
X::Composition::NotComposable.^find_method("message").wrap(%x{$language}<{X::Composition::NotComposable>//ENGLISH);
X::Constructor::Positional.^find_method("message").wrap(%x{$language}<{X::Constructor::Positional>//ENGLISH);
X::ControlFlow.^find_method("message").wrap(%x{$language}<{X::ControlFlow>//ENGLISH);
X::ControlFlow::Return.^find_method("message").wrap(%x{$language}<{X::ControlFlow::Return>//ENGLISH);
X::DateTime::InvalidDeltaUnit.^find_method("message").wrap(%x{$language}<{X::DateTime::InvalidDeltaUnit>//ENGLISH);
X::DateTime::TimezoneClash.^find_method("message").wrap(%x{$language}<{X::DateTime::TimezoneClash>//ENGLISH);
X::Declaration::OurScopeInRole.^find_method("message").wrap(%x{$language}<{X::Declaration::OurScopeInRole>//ENGLISH);
X::Declaration::Scope::Multi.^find_method("message").wrap(%x{$language}<{X::Declaration::Scope::Multi>//ENGLISH);
X::Dynamic::NotFound.^find_method("message").wrap(%x{$language}<{X::Dynamic::NotFound>//ENGLISH);
X::Dynamic::Package.^find_method("message").wrap(%x{$language}<{X::Dynamic::Package>//ENGLISH);
X::Dynamic::Postdeclaration.^find_method("message").wrap(%x{$language}<{X::Dynamic::Postdeclaration>//ENGLISH);
X::EXPORTHOW::Conflict.^find_method("message").wrap(%x{$language}<{X::EXPORTHOW::Conflict>//ENGLISH);
X::EXPORTHOW::InvalidDirective.^find_method("message").wrap(%x{$language}<{X::EXPORTHOW::InvalidDirective>//ENGLISH);
X::EXPORTHOW::NothingToSupersede.^find_method("message").wrap(%x{$language}<{X::EXPORTHOW::NothingToSupersede>//ENGLISH);
X::Encoding::AlreadyRegistered.^find_method("message").wrap(%x{$language}<{X::Encoding::AlreadyRegistered>//ENGLISH);
X::Encoding::Unknown.^find_method("message").wrap(%x{$language}<{X::Encoding::Unknown>//ENGLISH);
X::Eval::NoSuchLang.^find_method("message").wrap(%x{$language}<{X::Eval::NoSuchLang>//ENGLISH);
X::Exhausted.^find_method("message").wrap(%x{$language}<{X::Exhausted>//ENGLISH);
X::Experimental.^find_method("message").wrap(%x{$language}<{X::Experimental>//ENGLISH);
X::Export::NameClash.^find_method("message").wrap(%x{$language}<{X::Export::NameClash>//ENGLISH);
X::Hash::Store::OddNumber.^find_method("message").wrap(%x{$language}<{X::Hash::Store::OddNumber>//ENGLISH);
X::HyperOp::Infinite.^find_method("message").wrap(%x{$language}<{X::HyperOp::Infinite>//ENGLISH);
X::HyperOp::NonDWIM.^find_method("message").wrap(%x{$language}<{X::HyperOp::NonDWIM>//ENGLISH);
X::HyperWhatever::Multiple.^find_method("message").wrap(%x{$language}<{X::HyperWhatever::Multiple>//ENGLISH);
X::IO::BinaryAndEncoding.^find_method("message").wrap(%x{$language}<{X::IO::BinaryAndEncoding>//ENGLISH);
X::IO::BinaryMode.^find_method("message").wrap(%x{$language}<{X::IO::BinaryMode>//ENGLISH);
X::IO::Chdir.^find_method("message").wrap(%x{$language}<{X::IO::Chdir>//ENGLISH);
X::IO::Chmod.^find_method("message").wrap(%x{$language}<{X::IO::Chmod>//ENGLISH);
X::IO::Copy.^find_method("message").wrap(%x{$language}<{X::IO::Copy>//ENGLISH);
X::IO::Cwd.^find_method("message").wrap(%x{$language}<{X::IO::Cwd>//ENGLISH);
X::IO::Dir.^find_method("message").wrap(%x{$language}<{X::IO::Dir>//ENGLISH);
X::IO::Directory.^find_method("message").wrap(%x{$language}<{X::IO::Directory>//ENGLISH);
X::IO::DoesNotExist.^find_method("message").wrap(%x{$language}<{X::IO::DoesNotExist>//ENGLISH);
X::IO::Flush.^find_method("message").wrap(%x{$language}<{X::IO::Flush>//ENGLISH);
X::IO::Link.^find_method("message").wrap(%x{$language}<{X::IO::Link>//ENGLISH);
X::IO::Lock.^find_method("message").wrap(%x{$language}<{X::IO::Lock>//ENGLISH);
X::IO::Mkdir.^find_method("message").wrap(%x{$language}<{X::IO::Mkdir>//ENGLISH);
X::IO::Move.^find_method("message").wrap(%x{$language}<{X::IO::Move>//ENGLISH);
X::IO::NotAChild.^find_method("message").wrap(%x{$language}<{X::IO::NotAChild>//ENGLISH);
X::IO::NotAFile.^find_method("message").wrap(%x{$language}<{X::IO::NotAFile>//ENGLISH);
X::IO::Null.^find_method("message").wrap(%x{$language}<{X::IO::Null>//ENGLISH);
X::IO::Rename.^find_method("message").wrap(%x{$language}<{X::IO::Rename>//ENGLISH);
X::IO::Resolve.^find_method("message").wrap(%x{$language}<{X::IO::Resolve>//ENGLISH);
X::IO::Rmdir.^find_method("message").wrap(%x{$language}<{X::IO::Rmdir>//ENGLISH);
X::IO::Symlink.^find_method("message").wrap(%x{$language}<{X::IO::Symlink>//ENGLISH);
X::IO::Unknown.^find_method("message").wrap(%x{$language}<{X::IO::Unknown>//ENGLISH);
X::IO::Unlink.^find_method("message").wrap(%x{$language}<{X::IO::Unlink>//ENGLISH);
X::IllegalDimensionInShape.^find_method("message").wrap(%x{$language}<{X::IllegalDimensionInShape>//ENGLISH);
X::IllegalOnFixedDimensionArray.^find_method("message").wrap(%x{$language}<{X::IllegalOnFixedDimensionArray>//ENGLISH);
X::Immutable.^find_method("message").wrap(%x{$language}<{X::Immutable>//ENGLISH);
X::Import::MissingSymbols.^find_method("message").wrap(%x{$language}<{X::Import::MissingSymbols>//ENGLISH);
X::Import::NoSuchTag.^find_method("message").wrap(%x{$language}<{X::Import::NoSuchTag>//ENGLISH);
X::Import::OnlystarProto.^find_method("message").wrap(%x{$language}<{X::Import::OnlystarProto>//ENGLISH);
X::Import::Positional.^find_method("message").wrap(%x{$language}<{X::Import::Positional>//ENGLISH);
X::Import::Redeclaration.^find_method("message").wrap(%x{$language}<{X::Import::Redeclaration>//ENGLISH);
X::Inheritance::NotComposed.^find_method("message").wrap(%x{$language}<{X::Inheritance::NotComposed>//ENGLISH);
X::Inheritance::SelfInherit.^find_method("message").wrap(%x{$language}<{X::Inheritance::SelfInherit>//ENGLISH);
X::Inheritance::UnknownParent.^find_method("message").wrap(%x{$language}<{X::Inheritance::UnknownParent>//ENGLISH);
X::Inheritance::Unsupported.^find_method("message").wrap(%x{$language}<{X::Inheritance::Unsupported>//ENGLISH);
X::Invalid::ComputedValue.^find_method("message").wrap(%x{$language}<{X::Invalid::ComputedValue>//ENGLISH);
X::Invalid::Value.^find_method("message").wrap(%x{$language}<{X::Invalid::Value>//ENGLISH);
X::InvalidType.^find_method("message").wrap(%x{$language}<{X::InvalidType>//ENGLISH);
X::InvalidTypeSmiley.^find_method("message").wrap(%x{$language}<{X::InvalidTypeSmiley>//ENGLISH);
X::Item.^find_method("message").wrap(%x{$language}<{X::Item>//ENGLISH);
X::Language::ModRequired.^find_method("message").wrap(%x{$language}<{X::Language::ModRequired>//ENGLISH);
X::Language::TooLate.^find_method("message").wrap(%x{$language}<{X::Language::TooLate>//ENGLISH);
X::Language::Unsupported.^find_method("message").wrap(%x{$language}<{X::Language::Unsupported>//ENGLISH);
X::LibEmpty.^find_method("message").wrap(%x{$language}<{X::LibEmpty>//ENGLISH);
X::LibNone.^find_method("message").wrap(%x{$language}<{X::LibNone>//ENGLISH);
X::Localizer::NoContainer.^find_method("message").wrap(%x{$language}<{X::Localizer::NoContainer>//ENGLISH);
X::Match::Bool.^find_method("message").wrap(%x{$language}<{X::Match::Bool>//ENGLISH);
X::Method::InvalidQualifier.^find_method("message").wrap(%x{$language}<{X::Method::InvalidQualifier>//ENGLISH);
X::Method::Private::Permission.^find_method("message").wrap(%x{$language}<{X::Method::Private::Permission>//ENGLISH);
X::Method::Private::Unqualified.^find_method("message").wrap(%x{$language}<{X::Method::Private::Unqualified>//ENGLISH);
X::Mixin::NotComposable.^find_method("message").wrap(%x{$language}<{X::Mixin::NotComposable>//ENGLISH);
X::Multi::Ambiguous.^find_method("message").wrap(%x{$language}<{X::Multi::Ambiguous>//ENGLISH);
X::Multi::NoMatch.^find_method("message").wrap(%x{$language}<{X::Multi::NoMatch>//ENGLISH);
X::MultipleTypeSmiley.^find_method("message").wrap(%x{$language}<{X::MultipleTypeSmiley>//ENGLISH);
X::MustBeParametric.^find_method("message").wrap(%x{$language}<{X::MustBeParametric>//ENGLISH);
X::NQP::NotFound.^find_method("message").wrap(%x{$language}<{X::NQP::NotFound>//ENGLISH);
X::NYI::Available.^find_method("message").wrap(%x{$language}<{X::NYI::Available>//ENGLISH);
X::NYI::BigInt.^find_method("message").wrap(%x{$language}<{X::NYI::BigInt>//ENGLISH);
X::NoCoreRevision.^find_method("message").wrap(%x{$language}<{X::NoCoreRevision>//ENGLISH);
X::NoDispatcher.^find_method("message").wrap(%x{$language}<{X::NoDispatcher>//ENGLISH);
X::NoSuchSymbol.^find_method("message").wrap(%x{$language}<{X::NoSuchSymbol>//ENGLISH);
X::NotEnoughDimensions.^find_method("message").wrap(%x{$language}<{X::NotEnoughDimensions>//ENGLISH);
X::NotParametric.^find_method("message").wrap(%x{$language}<{X::NotParametric>//ENGLISH);
X::Numeric::CannotConvert.^find_method("message").wrap(%x{$language}<{X::Numeric::CannotConvert>//ENGLISH);
X::Numeric::Confused.^find_method("message").wrap(%x{$language}<{X::Numeric::Confused>//ENGLISH);
X::Numeric::DivideByZero.^find_method("message").wrap(%x{$language}<{X::Numeric::DivideByZero>//ENGLISH);
X::Numeric::Overflow.^find_method("message").wrap(%x{$language}<{X::Numeric::Overflow>//ENGLISH);
X::Numeric::Underflow.^find_method("message").wrap(%x{$language}<{X::Numeric::Underflow>//ENGLISH);
X::Obsolete.^find_method("message").wrap(%x{$language}<{X::Obsolete>//ENGLISH);
X::OutOfRange.^find_method("message").wrap(%x{$language}<{X::OutOfRange>//ENGLISH);
X::Package::Stubbed.^find_method("message").wrap(%x{$language}<{X::Package::Stubbed>//ENGLISH);
X::Package::UseLib.^find_method("message").wrap(%x{$language}<{X::Package::UseLib>//ENGLISH);
X::Pairup::OddNumber.^find_method("message").wrap(%x{$language}<{X::Pairup::OddNumber>//ENGLISH);
X::Parameter::AfterDefault.^find_method("message").wrap(%x{$language}<{X::Parameter::AfterDefault>//ENGLISH);
X::Parameter::BadType.^find_method("message").wrap(%x{$language}<{X::Parameter::BadType>//ENGLISH);
X::Parameter::Default.^find_method("message").wrap(%x{$language}<{X::Parameter::Default>//ENGLISH);
X::Parameter::Default::TypeCheck.^find_method("message").wrap(%x{$language}<{X::Parameter::Default::TypeCheck>//ENGLISH);
X::Parameter::InvalidConcreteness.^find_method("message").wrap(%x{$language}<{X::Parameter::InvalidConcreteness>//ENGLISH);
X::Parameter::InvalidType.^find_method("message").wrap(%x{$language}<{X::Parameter::InvalidType>//ENGLISH);
X::Parameter::MultipleTypeConstraints.^find_method("message").wrap(%x{$language}<{X::Parameter::MultipleTypeConstraints>//ENGLISH);
X::Parameter::Placeholder.^find_method("message").wrap(%x{$language}<{X::Parameter::Placeholder>//ENGLISH);
X::Parameter::RW.^find_method("message").wrap(%x{$language}<{X::Parameter::RW>//ENGLISH);
X::Parameter::Twigil.^find_method("message").wrap(%x{$language}<{X::Parameter::Twigil>//ENGLISH);
X::Parameter::TypedSlurpy.^find_method("message").wrap(%x{$language}<{X::Parameter::TypedSlurpy>//ENGLISH);
X::Parameter::WrongOrder.^find_method("message").wrap(%x{$language}<{X::Parameter::WrongOrder>//ENGLISH);
X::ParametricConstant.^find_method("message").wrap(%x{$language}<{X::ParametricConstant>//ENGLISH);
X::Phaser::Multiple.^find_method("message").wrap(%x{$language}<{X::Phaser::Multiple>//ENGLISH);
X::Phaser::PrePost.^find_method("message").wrap(%x{$language}<{X::Phaser::PrePost>//ENGLISH);
X::PhaserExceptions.^find_method("message").wrap(%x{$language}<{X::PhaserExceptions>//ENGLISH);
X::Placeholder::Attribute.^find_method("message").wrap(%x{$language}<{X::Placeholder::Attribute>//ENGLISH);
X::Placeholder::Block.^find_method("message").wrap(%x{$language}<{X::Placeholder::Block>//ENGLISH);
X::Placeholder::Mainline.^find_method("message").wrap(%x{$language}<{X::Placeholder::Mainline>//ENGLISH);
X::Placeholder::NonPlaceholder.^find_method("message").wrap(%x{$language}<{X::Placeholder::NonPlaceholder>//ENGLISH);
X::PoisonedAlias.^find_method("message").wrap(%x{$language}<{X::PoisonedAlias>//ENGLISH);
X::Pragma::CannotPrecomp.^find_method("message").wrap(%x{$language}<{X::Pragma::CannotPrecomp>//ENGLISH);
X::Pragma::CannotWhat.^find_method("message").wrap(%x{$language}<{X::Pragma::CannotWhat>//ENGLISH);
X::Pragma::MustOneOf.^find_method("message").wrap(%x{$language}<{X::Pragma::MustOneOf>//ENGLISH);
X::Pragma::NoArgs.^find_method("message").wrap(%x{$language}<{X::Pragma::NoArgs>//ENGLISH);
X::Pragma::OnlyOne.^find_method("message").wrap(%x{$language}<{X::Pragma::OnlyOne>//ENGLISH);
X::Pragma::UnknownArg.^find_method("message").wrap(%x{$language}<{X::Pragma::UnknownArg>//ENGLISH);
X::Proc::Unsuccessful.^find_method("message").wrap(%x{$language}<{X::Proc::Unsuccessful>//ENGLISH);
X::PseudoPackage::InDeclaration.^find_method("message").wrap(%x{$language}<{X::PseudoPackage::InDeclaration>//ENGLISH);
X::Range::InvalidArg.^find_method("message").wrap(%x{$language}<{X::Range::InvalidArg>//ENGLISH);
X::Redeclaration::Outer.^find_method("message").wrap(%x{$language}<{X::Redeclaration::Outer>//ENGLISH);
X::Role::Parametric::NoSuchCandidate.^find_method("message").wrap(%x{$language}<{X::Role::Parametric::NoSuchCandidate>//ENGLISH);
X::Routine::Unwrap.^find_method("message").wrap(%x{$language}<{X::Routine::Unwrap>//ENGLISH);
X::SecurityPolicy::Eval.^find_method("message").wrap(%x{$language}<{X::SecurityPolicy::Eval>//ENGLISH);
X::Seq::Consumed.^find_method("message").wrap(%x{$language}<{X::Seq::Consumed>//ENGLISH);
X::Seq::NotIndexable.^find_method("message").wrap(%x{$language}<{X::Seq::NotIndexable>//ENGLISH);
X::Sequence::Deduction.^find_method("message").wrap(%x{$language}<{X::Sequence::Deduction>//ENGLISH);
X::Sequence::Endpoint.^find_method("message").wrap(%x{$language}<{X::Sequence::Endpoint>//ENGLISH);
X::Set::Coerce.^find_method("message").wrap(%x{$language}<{X::Set::Coerce>//ENGLISH);
X::Signature::NameClash.^find_method("message").wrap(%x{$language}<{X::Signature::NameClash>//ENGLISH);
X::Signature::Placeholder.^find_method("message").wrap(%x{$language}<{X::Signature::Placeholder>//ENGLISH);
X::Str::InvalidCharName.^find_method("message").wrap(%x{$language}<{X::Str::InvalidCharName>//ENGLISH);
X::Str::Match::x.^find_method("message").wrap(%x{$language}<{X::Str::Match::x>//ENGLISH);
X::Str::Numeric.^find_method("message").wrap(%x{$language}<{X::Str::Numeric>//ENGLISH);
X::Str::Sprintf::Directives::BadType.^find_method("message").wrap(%x{$language}<{X::Str::Sprintf::Directives::BadType>//ENGLISH);
X::Str::Sprintf::Directives::Count.^find_method("message").wrap(%x{$language}<{X::Str::Sprintf::Directives::Count>//ENGLISH);
X::Str::Sprintf::Directives::Unsupported.^find_method("message").wrap(%x{$language}<{X::Str::Sprintf::Directives::Unsupported>//ENGLISH);
X::Str::Subst::Adverb.^find_method("message").wrap(%x{$language}<{X::Str::Subst::Adverb>//ENGLISH);
X::Str::Trans::IllegalKey.^find_method("message").wrap(%x{$language}<{X::Str::Trans::IllegalKey>//ENGLISH);
X::Str::Trans::InvalidArg.^find_method("message").wrap(%x{$language}<{X::Str::Trans::InvalidArg>//ENGLISH);
X::Subscript::Negative.^find_method("message").wrap(%x{$language}<{X::Subscript::Negative>//ENGLISH);
X::Syntax::AddCategorical::TooFewParts.^find_method("message").wrap(%x{$language}<{X::Syntax::AddCategorical::TooFewParts>//ENGLISH);
X::Syntax::AddCategorical::TooManyParts.^find_method("message").wrap(%x{$language}<{X::Syntax::AddCategorical::TooManyParts>//ENGLISH);
X::Syntax::Adverb.^find_method("message").wrap(%x{$language}<{X::Syntax::Adverb>//ENGLISH);
X::Syntax::Argument::MOPMacro.^find_method("message").wrap(%x{$language}<{X::Syntax::Argument::MOPMacro>//ENGLISH);
X::Syntax::Augment::WithoutMonkeyTyping.^find_method("message").wrap(%x{$language}<{X::Syntax::Augment::WithoutMonkeyTyping>//ENGLISH);
X::Syntax::BlockGobbled.^find_method("message").wrap(%x{$language}<{X::Syntax::BlockGobbled>//ENGLISH);
X::Syntax::CannotMeta.^find_method("message").wrap(%x{$language}<{X::Syntax::CannotMeta>//ENGLISH);
X::Syntax::Coercer::TooComplex.^find_method("message").wrap(%x{$language}<{X::Syntax::Coercer::TooComplex>//ENGLISH);
X::Syntax::Comment::Embedded.^find_method("message").wrap(%x{$language}<{X::Syntax::Comment::Embedded>//ENGLISH);
X::Syntax::ConditionalOperator::PrecedenceTooLoose.^find_method("message").wrap(%x{$language}<{X::Syntax::ConditionalOperator::PrecedenceTooLoose>//ENGLISH);
X::Syntax::ConditionalOperator::SecondPartGobbled.^find_method("message").wrap(%x{$language}<{X::Syntax::ConditionalOperator::SecondPartGobbled>//ENGLISH);
X::Syntax::ConditionalOperator::SecondPartInvalid.^find_method("message").wrap(%x{$language}<{X::Syntax::ConditionalOperator::SecondPartInvalid>//ENGLISH);
X::Syntax::Confused.^find_method("message").wrap(%x{$language}<{X::Syntax::Confused>//ENGLISH);
X::Syntax::DuplicatedPrefix.^find_method("message").wrap(%x{$language}<{X::Syntax::DuplicatedPrefix>//ENGLISH);
X::Syntax::Extension::Category.^find_method("message").wrap(%x{$language}<{X::Syntax::Extension::Category>//ENGLISH);
X::Syntax::Extension::Null.^find_method("message").wrap(%x{$language}<{X::Syntax::Extension::Null>//ENGLISH);
X::Syntax::Extension::SpecialForm.^find_method("message").wrap(%x{$language}<{X::Syntax::Extension::SpecialForm>//ENGLISH);
X::Syntax::Extension::TooComplex.^find_method("message").wrap(%x{$language}<{X::Syntax::Extension::TooComplex>//ENGLISH);
X::Syntax::InfixInTermPosition.^find_method("message").wrap(%x{$language}<{X::Syntax::InfixInTermPosition>//ENGLISH);
X::Syntax::KeywordAsFunction.^find_method("message").wrap(%x{$language}<{X::Syntax::KeywordAsFunction>//ENGLISH);
X::Syntax::Malformed.^find_method("message").wrap(%x{$language}<{X::Syntax::Malformed>//ENGLISH);
X::Syntax::Malformed::Elsif.^find_method("message").wrap(%x{$language}<{X::Syntax::Malformed::Elsif>//ENGLISH);
X::Syntax::Missing.^find_method("message").wrap(%x{$language}<{X::Syntax::Missing>//ENGLISH);
X::Syntax::Name::Null.^find_method("message").wrap(%x{$language}<{X::Syntax::Name::Null>//ENGLISH);
X::Syntax::NegatedPair.^find_method("message").wrap(%x{$language}<{X::Syntax::NegatedPair>//ENGLISH);
X::Syntax::NoSelf.^find_method("message").wrap(%x{$language}<{X::Syntax::NoSelf>//ENGLISH);
X::Syntax::NonAssociative.^find_method("message").wrap(%x{$language}<{X::Syntax::NonAssociative>//ENGLISH);
X::Syntax::NonListAssociative.^find_method("message").wrap(%x{$language}<{X::Syntax::NonListAssociative>//ENGLISH);
X::Syntax::Number::IllegalDecimal.^find_method("message").wrap(%x{$language}<{X::Syntax::Number::IllegalDecimal>//ENGLISH);
X::Syntax::Number::LiteralType.^find_method("message").wrap(%x{$language}<{X::Syntax::Number::LiteralType>//ENGLISH);
X::Syntax::Number::RadixOutOfRange.^find_method("message").wrap(%x{$language}<{X::Syntax::Number::RadixOutOfRange>//ENGLISH);
X::Syntax::P5.^find_method("message").wrap(%x{$language}<{X::Syntax::P5>//ENGLISH);
X::Syntax::ParentAsHash.^find_method("message").wrap(%x{$language}<{X::Syntax::ParentAsHash>//ENGLISH);
X::Syntax::Perl5Var.^find_method("message").wrap(%x{$language}<{X::Syntax::Perl5Var>//ENGLISH);
X::Syntax::Pod::DeclaratorLeading.^find_method("message").wrap(%x{$language}<{X::Syntax::Pod::DeclaratorLeading>//ENGLISH);
X::Syntax::Pod::DeclaratorTrailing.^find_method("message").wrap(%x{$language}<{X::Syntax::Pod::DeclaratorTrailing>//ENGLISH);
X::Syntax::Regex::Adverb.^find_method("message").wrap(%x{$language}<{X::Syntax::Regex::Adverb>//ENGLISH);
X::Syntax::Regex::Alias::LongName.^find_method("message").wrap(%x{$language}<{X::Syntax::Regex::Alias::LongName>//ENGLISH);
X::Syntax::Regex::MalformedRange.^find_method("message").wrap(%x{$language}<{X::Syntax::Regex::MalformedRange>//ENGLISH);
X::Syntax::Regex::NonQuantifiable.^find_method("message").wrap(%x{$language}<{X::Syntax::Regex::NonQuantifiable>//ENGLISH);
X::Syntax::Regex::NullRegex.^find_method("message").wrap(%x{$language}<{X::Syntax::Regex::NullRegex>//ENGLISH);
X::Syntax::Regex::QuantifierValue.^find_method("message").wrap(%x{$language}<{X::Syntax::Regex::QuantifierValue>//ENGLISH);
X::Syntax::Regex::SolitaryBacktrackControl.^find_method("message").wrap(%x{$language}<{X::Syntax::Regex::SolitaryBacktrackControl>//ENGLISH);
X::Syntax::Regex::SolitaryQuantifier.^find_method("message").wrap(%x{$language}<{X::Syntax::Regex::SolitaryQuantifier>//ENGLISH);
X::Syntax::Regex::SpacesInBareRange.^find_method("message").wrap(%x{$language}<{X::Syntax::Regex::SpacesInBareRange>//ENGLISH);
X::Syntax::Regex::UnrecognizedMetachar.^find_method("message").wrap(%x{$language}<{X::Syntax::Regex::UnrecognizedMetachar>//ENGLISH);
X::Syntax::Regex::UnrecognizedModifier.^find_method("message").wrap(%x{$language}<{X::Syntax::Regex::UnrecognizedModifier>//ENGLISH);
X::Syntax::Regex::Unspace.^find_method("message").wrap(%x{$language}<{X::Syntax::Regex::Unspace>//ENGLISH);
X::Syntax::Reserved.^find_method("message").wrap(%x{$language}<{X::Syntax::Reserved>//ENGLISH);
X::Syntax::Self::WithoutObject.^find_method("message").wrap(%x{$language}<{X::Syntax::Self::WithoutObject>//ENGLISH);
X::Syntax::Signature::InvocantMarker.^find_method("message").wrap(%x{$language}<{X::Syntax::Signature::InvocantMarker>//ENGLISH);
X::Syntax::Signature::InvocantNotAllowed.^find_method("message").wrap(%x{$language}<{X::Syntax::Signature::InvocantNotAllowed>//ENGLISH);
X::Syntax::Term::MissingInitializer.^find_method("message").wrap(%x{$language}<{X::Syntax::Term::MissingInitializer>//ENGLISH);
X::Syntax::Type::Adverb.^find_method("message").wrap(%x{$language}<{X::Syntax::Type::Adverb>//ENGLISH);
X::Syntax::UnlessElse.^find_method("message").wrap(%x{$language}<{X::Syntax::UnlessElse>//ENGLISH);
X::Syntax::Variable::BadType.^find_method("message").wrap(%x{$language}<{X::Syntax::Variable::BadType>//ENGLISH);
X::Syntax::Variable::ConflictingTypes.^find_method("message").wrap(%x{$language}<{X::Syntax::Variable::ConflictingTypes>//ENGLISH);
X::Syntax::Variable::IndirectDeclaration.^find_method("message").wrap(%x{$language}<{X::Syntax::Variable::IndirectDeclaration>//ENGLISH);
X::Syntax::Variable::Initializer.^find_method("message").wrap(%x{$language}<{X::Syntax::Variable::Initializer>//ENGLISH);
X::Syntax::Variable::Match.^find_method("message").wrap(%x{$language}<{X::Syntax::Variable::Match>//ENGLISH);
X::Syntax::Variable::MissingInitializer.^find_method("message").wrap(%x{$language}<{X::Syntax::Variable::MissingInitializer>//ENGLISH);
X::Syntax::Variable::Numeric.^find_method("message").wrap(%x{$language}<{X::Syntax::Variable::Numeric>//ENGLISH);
X::Syntax::Variable::Twigil.^find_method("message").wrap(%x{$language}<{X::Syntax::Variable::Twigil>//ENGLISH);
X::Syntax::VirtualCall.^find_method("message").wrap(%x{$language}<{X::Syntax::VirtualCall>//ENGLISH);
X::Syntax::WithoutElse.^find_method("message").wrap(%x{$language}<{X::Syntax::WithoutElse>//ENGLISH);
X::Temporal::InvalidFormat.^find_method("message").wrap(%x{$language}<{X::Temporal::InvalidFormat>//ENGLISH);
X::TooLateForREPR.^find_method("message").wrap(%x{$language}<{X::TooLateForREPR>//ENGLISH);
X::TooManyDimensions.^find_method("message").wrap(%x{$language}<{X::TooManyDimensions>//ENGLISH);
X::Trait::Invalid.^find_method("message").wrap(%x{$language}<{X::Trait::Invalid>//ENGLISH);
X::Trait::NotOnNative.^find_method("message").wrap(%x{$language}<{X::Trait::NotOnNative>//ENGLISH);
X::Trait::Scope.^find_method("message").wrap(%x{$language}<{X::Trait::Scope>//ENGLISH);
X::Trait::Unknown.^find_method("message").wrap(%x{$language}<{X::Trait::Unknown>//ENGLISH);
X::TypeCheck.^find_method("message").wrap(%x{$language}<{X::TypeCheck>//ENGLISH);
X::TypeCheck::Argument.^find_method("message").wrap(%x{$language}<{X::TypeCheck::Argument>//ENGLISH);
X::TypeCheck::Assignment.^find_method("message").wrap(%x{$language}<{X::TypeCheck::Assignment>//ENGLISH);
X::TypeCheck::Binding.^find_method("message").wrap(%x{$language}<{X::TypeCheck::Binding>//ENGLISH);
X::TypeCheck::Binding::Parameter.^find_method("message").wrap(%x{$language}<{X::TypeCheck::Binding::Parameter>//ENGLISH);
X::TypeCheck::Return.^find_method("message").wrap(%x{$language}<{X::TypeCheck::Return>//ENGLISH);
X::Undeclared.^find_method("message").wrap(%x{$language}<{X::Undeclared>//ENGLISH);
X::Undeclared::Symbols.^find_method("message").wrap(%x{$language}<{X::Undeclared::Symbols>//ENGLISH);
X::UnitScope::Invalid.^find_method("message").wrap(%x{$language}<{X::UnitScope::Invalid>//ENGLISH);
X::UnitScope::TooLate.^find_method("message").wrap(%x{$language}<{X::UnitScope::TooLate>//ENGLISH);
X::Value::Dynamic.^find_method("message").wrap(%x{$language}<{X::Value::Dynamic>//ENGLISH);
X::WheneverOutOfScope.^find_method("message").wrap(%x{$language}<{X::WheneverOutOfScope>//ENGLISH);
X::Worry::P5::BackReference.^find_method("message").wrap(%x{$language}<{X::Worry::P5::BackReference>//ENGLISH);
X::Worry::P5::LeadingZero.^find_method("message").wrap(%x{$language}<{X::Worry::P5::LeadingZero>//ENGLISH);
X::Worry::P5::Reference.^find_method("message").wrap(%x{$language}<{X::Worry::P5::Reference>//ENGLISH);
X::Worry::Precedence::Range.^find_method("message").wrap(%x{$language}<{X::Worry::Precedence::Range>//ENGLISH);
