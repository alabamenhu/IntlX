#!/usr/bin/env perl6

=begin pod
This is a super simple parser that relies on the fact that Rakudo's code base follows
fairly good code indenting.  This way we can look for a specific indent.  If Rakudo's
style changes, a newer parser may be needed.
=end pod
use lib ($?FILE.IO.sibling("lib"));
use Support;

# These classes are to be skipped, because they do not have a
# defined .message method and will cause an error in wrapping.
my $x-file   = $?FILE.IO.sibling('Exception.pm6');
my @exclude  = <Exception X::Method::NotFound X::StubCode CX::Warn Exception::JSON>;
my $gen-file = $?FILE.IO.parent.sibling('lib').add('Intl').add('X.pm6');

my %exceptions := exceptions-in-file $x-file, :@exclude;
my @classes = %exceptions.keys;

my $header = q:to/GENERATED/;
#####################################################
### AUTOGENERATED ! AUTOGENERATED ! AUTOGENERATED ###
#####################################################
###  DO NOT EDIT THIS BOX OR ANYTHING BENEATH IT  ###
#####################################################

GENERATED

my @skip = 'X::Sequence::Endpoint';
my $wrap-code = [~] do for @classes.sort -> $type {
    ('#' if $type (elem) @skip) ~
     $type ~ ".^find_method('message').wrap: method \{with \%x\{\$language}<$type> \{self.\&(\$_)} else \{callsame}};\n"
}

my $current-file = $gen-file.slurp;

my $offset = $current-file.index($header);
my $base = $current-file.substr(0,$offset);

$gen-file.spurt: $base ~ $header ~ $wrap-code;