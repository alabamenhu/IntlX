#!/usr/bin/env perl6

=begin pod
This is a super simple parser that relies on the fact that Rakudo's code base follows
fairly good code indenting.  This way we can look for a specific indent.  If Rakudo's
style changes, a newer parser may be needed.
=end pod

# These classes are to be skipped, because they do not have a
# defined .message method and will cause an error in wrapping.
my @skip     = <Exception Exception::JSON>;
my $x-file   = $?FILE.IO.sibling('Exception.pm6');
my $gen-file = $?FILE.IO.parent.sibling('lib').add('Intl').add('X.pm6');

my rule class-header {
    ^ my class
    $<class>=(\S+)
    [[is|does] \S+]*
    '{'
    [['...' | 'â€¦'] <!>]?     # this disallows stubs
}

my @classes;
@classes.push: ~$<class>
  if .match: &class-header
    for $x-file.lines;

my $header = q:to/GENERATED/;
#####################################################
### AUTOGENERATED ! AUTOGENERATED ! AUTOGENERATED ###
#####################################################
###  DO NOT EDIT THIS BOX OR ANYTHING BENEATH IT  ###
#####################################################

GENERATED

my $wrap-code;
for @classes.sort -> $type {
  $wrap-code ~= qq:to/WRAP/;
    {$type}.^find_method('message').wrap(%x\{\$language\}<{$type}>//ENGLISH);
    say 'wrapped $type';
    WRAP
}

my $current-file = $x-file.slurp;
my $offset = $current-file.index($header);
my $base = $current-file.substr(0,$offset);

$x-file.spurt: $base ~ $header ~ $wrap-code;